#!/bin/bash

copy_files(){
	echo
}

check_programs(){
	if hash git 1>/dev/null 2>&1; then
		echo "Git installed."
	else
		echo "Git is not installed. Please install Git."
		exit 1
	fi
	
	if hash "$dotnet" 1>/dev/null 2>&1; then
		echo "Dotnet installed."
	else
		echo "Dotnet at \"$dotnet\" is not installed. Please check this scripts settings."
		exit 1
	fi
}

fetch_build_copy(){
	cd "$root"
	
	perform_build=true
	if [ ! -d "$sourcedir/.git" ]; then
		echo "Downloading $name."
		git clone -b "$branch" --recursive --depth 1 "$repourl" "$sourcedir" || exit 1
		cd "$sourcedir"
	else
		echo "Updating $name."
		cd "$sourcedir"
		old_hash=$(git rev-parse HEAD)
		git pull
		new_hash=$(git rev-parse HEAD)

		[ "$old_hash" = "$new_hash" ] && perform_build=false
	fi
	
	if [ "$1" = "--build" ] || [ "$perform_build" = true ] || [ ! -d "$root/$builddir" ]; then
		echo -e "\nRestoring dependencies."
		$dotnet restore || exit 1
		
		copy_old_files=false
		if [ -d "$root/$builddir" ]; then
			copy_old_files=true
			echo -e "\nBacking up the current $name build."
			
			cd "$root"
			rm -rf "$oldbuilddir" 1>/dev/null 2>&1
			mv -fT "$builddir" "$oldbuilddir" 1>/dev/null 2>&1

			cd "$sourcedir"
		fi
		
		echo -e "\nBuilding new $name."
		$dotnet build --configuration Release -o "$root/$builddir" || exit 1
		
		cd "$root"
		
		[ "$copy_old_files" = true ] && copy_files
	else
		echo "Not performing build, nothing changed."
	fi
}

run_bot(){
	cd "$root/$rundir"
	$dotnet "$root/$builddir/$executable" || exit 1
}


force_build=false
config_file="build-run.cfg"

for var in "$@"; do
	case $1 in
		-h|--help)
			echo <<HELP
	--help  -h # Show this help
	--build -b # Force build on start
HELP
			exit 0
			;;
		-b|--build)
			force_build=true
			;;
		*)
			config_file="$var"
			;;
	esac
done

. "$config_file"

if [ "$force_build" = true ] || [ ! -d "$root/$builddir" ]; then
	fetch_build_copy --build
fi

while :; do
	run_bot && fetch_build_copy || exit 1
done
